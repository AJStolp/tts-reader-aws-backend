"""Initial user model with complete schema

Revision ID: initial_user_model
Revises: 
Create Date: 2025-06-29 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'initial_user_model'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Enable UUID extension for PostgreSQL
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')
    
    # Create users table with complete schema
    op.create_table('users',
        sa.Column('user_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('email', sa.String(length=128), nullable=False),
        sa.Column('first_name', sa.String(length=128), nullable=True),
        sa.Column('last_name', sa.String(length=128), nullable=True),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('remaining_chars', sa.Integer(), nullable=False, server_default='100000'),
        sa.Column('engine', sa.String(length=20), nullable=False, server_default='standard'),
        sa.Column('voice_id', sa.String(length=50), nullable=False, server_default='Joanna'),
        sa.Column('stripe_subscription_id', sa.String(length=128), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
        sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
        sa.PrimaryKeyConstraint('user_id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
    )
    
    # Create indexes for better performance
    op.create_index('idx_users_username', 'users', ['username'])
    op.create_index('idx_users_email', 'users', ['email'])
    op.create_index('idx_users_active', 'users', ['is_active'])
    op.create_index('idx_users_created_at', 'users', ['created_at'])
    
    # Add constraints for data validation
    op.create_check_constraint(
        'chk_remaining_chars_positive',
        'users',
        'remaining_chars >= 0'
    )
    
    op.create_check_constraint(
        'chk_engine_valid',
        'users',
        "engine IN ('standard', 'neural')"
    )
    
    op.create_check_constraint(
        'chk_username_length',
        'users',
        'LENGTH(username) >= 3'
    )
    
    op.create_check_constraint(
        'chk_email_format',
        'users',
        "email ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'"
    )
    
    # Create function to update updated_at timestamp
    op.execute("""
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = CURRENT_TIMESTAMP;
            RETURN NEW;
        END;
        $$ language 'plpgsql';
    """)
    
    # Create trigger to automatically update updated_at
    op.execute("""
        CREATE TRIGGER update_users_updated_at
            BEFORE UPDATE ON users
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop trigger and function
    op.execute('DROP TRIGGER IF EXISTS update_users_updated_at ON users')
    op.execute('DROP FUNCTION IF EXISTS update_updated_at_column()')
    
    # Drop constraints
    op.drop_constraint('chk_email_format', 'users')
    op.drop_constraint('chk_username_length', 'users')
    op.drop_constraint('chk_engine_valid', 'users')
    op.drop_constraint('chk_remaining_chars_positive', 'users')
    
    # Drop indexes
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_index('idx_users_active', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_username', table_name='users')
    
    # Drop table
    op.drop_table('users')
    
    # ### end Alembic commands ###